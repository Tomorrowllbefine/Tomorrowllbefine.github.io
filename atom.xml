<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mmkk&#39;s blogs</title>
  
  <subtitle>Stay Hungry,  Stay Foolish.</subtitle>
  <link href="https://tomorrowllbefine.github.io/atom.xml" rel="self"/>
  
  <link href="https://tomorrowllbefine.github.io/"/>
  <updated>2024-12-20T14:53:49.806Z</updated>
  <id>https://tomorrowllbefine.github.io/</id>
  
  <author>
    <name>mmkk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试</title>
    <link href="https://tomorrowllbefine.github.io/2024/12/20/test/"/>
    <id>https://tomorrowllbefine.github.io/2024/12/20/test/</id>
    <published>2024-12-20T14:52:36.000Z</published>
    <updated>2024-12-20T14:53:49.806Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>嵌入 html：</p></blockquote><div align="center">  <img src="https://raw.githubusercontent.com/Tomorrowllbefine/Study/master/pics/image-20241220173230866.png" alt="image" width="300px"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;嵌入 html：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://raw.githubusercontent.com/Tomorrowllbefine/Study/master/</summary>
      
    
    
    
    <category term="test" scheme="https://tomorrowllbefine.github.io/categories/test/"/>
    
    
    <category term="test" scheme="https://tomorrowllbefine.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tomorrowllbefine.github.io/2024/12/20/hello-world/"/>
    <id>https://tomorrowllbefine.github.io/2024/12/20/hello-world/</id>
    <published>2024-12-20T06:42:49.000Z</published>
    <updated>2024-12-20T16:52:18.643Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="test" scheme="https://tomorrowllbefine.github.io/categories/test/"/>
    
    
    <category term="test" scheme="https://tomorrowllbefine.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>算法 | 分治</title>
    <link href="https://tomorrowllbefine.github.io/2024/12/20/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    <id>https://tomorrowllbefine.github.io/2024/12/20/%E5%88%86%E6%B2%BB%E6%B3%95/</id>
    <published>2024-12-20T06:42:49.000Z</published>
    <updated>2024-12-20T16:52:04.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h3 id="Q1：求序列第二大元素"><a href="#Q1：求序列第二大元素" class="headerlink" title="Q1：求序列第二大元素"></a>Q1：求序列第二大元素</h3><p><img src="/Pasted%20image%2020230513151811.png"><br><strong>解</strong>：<br>在分治算法中，当$n&#x3D;2$时，只需要一次比较即可找到第二大元素。当$n&gt;2$时，需要分别在两个子数组中找到第一大和第二大的元素，然后再进行$2$次比较，从而得到整个数组的第二大元素。</p><span id="more"></span><p>假设找到第一大和第二大的元素需要 $T(n)$ 次比较。在分治算法中，我们将数组分成了两个大小为 $n&#x2F;2$ 的子数组，因此我们需要分别在这两个子数组中找到第一大和第二大的元素。由于递归地进行该算法，所以需要进行两次比较。因此，总共需要进行 $2T(n&#x2F;2) + 2$ 次比较。</p><p>当 $n&#x3D;2^k$ 时，递归的深度为 $k$，此时数组中的元素个数为 $2^k$。因此，比较的次数为：</p><p>$$<br>\begin{aligned}<br>T(n) &amp;&#x3D; 2T(n&#x2F;2) + 2 \<br>&amp;&#x3D; 2(2T(n&#x2F;4) + 2) + 2 \<br>&amp;&#x3D; 2^2 T(n&#x2F;2^2) + 2^2 + 2 \<br>&amp;\quad \vdots \<br>&amp;&#x3D; 2^k T(1) + 2^k - 2 \<br>&amp;&#x3D; n - 2 + \frac{n}{2} \<br>&amp;&#x3D; \frac{3n}{2} - 2<br>\end{aligned}<br>$$</p><p>因此，当 $n&#x3D;2^k$ 时，该算法的比较次数为 $3n&#x2F;2 - 2$，选项 $\mathbf{D}$ 是正确的。</p><h3 id="Q2：主定理运用"><a href="#Q2：主定理运用" class="headerlink" title="Q2：主定理运用"></a>Q2：主定理运用</h3><p><img src="/Pasted%20image%2020230513153733.png"><br><strong>解</strong>：<br>该问题中的分治算法的时间复杂度由分治的步骤和治的步骤两部分组成。在分治的步骤中，问题被分成多个规模较小的子问题；在治的步骤中，对每个子问题进行处理。<br><img src="/Pasted%20image%2020230513153853.png" alt="500"><br>在选项 A 中，问题每步被分成 4 个规模均为 n&#x2F;2 的子问题，这是一种类似于四分的方式。在治的步骤中，处理每个子问题的时间复杂度是 Θ(n)。因此，总时间复杂度可以用递归式表示为：**T(n) &#x3D; 4T(n&#x2F;2) + Θ(n)**。 根据主定理，这个递归式的解是 Θ(n^2)。因此，选项 A 的时间复杂度是 Θ(n^2)。</p><p>在选项 B 中，问题每步被分成 2 个规模均为 n&#x2F;2 的子问题，这是一种类似于二分的方式。在治的步骤中，处理每个子问题的时间复杂度是 Θ(n^2)。因此，总时间复杂度可以用递归式表示为：**T(n) &#x3D; 2T(n&#x2F;2) + Θ(n^2)**。 根据主定理，这个递归式的解是 Θ(n^2 log n)。因此，选项 B 的时间复杂度是 Θ(n^2 log n)。</p><p>在选项 C 中，问题每步被分成 7 个规模均为 n&#x2F;3 的子问题。在治的步骤中，处理每个子问题的时间复杂度是 Θ(n)。因此，总时间复杂度可以用递归式表示为：**T(n) &#x3D; 7T(n&#x2F;3) + Θ(n)**。 根据主定理，这个递归式的解是 Θ(n^log3 7)。因此，选项 C 的时间复杂度是 Θ(n^1.77)。</p><p>在选项 D 中，问题每步被分成 5 个规模均为 n&#x2F;3 的子问题。在治的步骤中，处理每个子问题的时间复杂度是 Θ(n^2)。因此，总时间复杂度可以用递归式表示为：**T(n) &#x3D; 5T(n&#x2F;3) + Θ(n^2)*<em>。根据主定理，这个递归式的解是 Θ(n^2</em> log3 5) ≈ Θ(1.464 * n^2)。因此，选项 D 的时间复杂度最快，是 Θ(n^1.464)。</p><p>因此，选项 D 是最快的。</p><h3 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h3><p><img src="/Pasted%20image%2020230513214506.png"><br><strong>解</strong>：<br>当输入数组 A[1…n]由相等的 n 个元素组成时，快速排序算法 QUICKSORT 的运算特征如下：</p><p>A. 运行时间为 Θ(n log n)。在最坏情况下，每次划分只能减少一个元素，递推式为 T(n) &#x3D; T(n-1) + Θ(n)，解得 T(n) &#x3D; Θ(n^2)；但是，在平均情况下，每次划分可以将序列分为两部分，递推式为 T(n) &#x3D; 2T(n&#x2F;2) + Θ(n)，解得 T(n) &#x3D; Θ(n log n)。</p><p>B. 元素交换次数为 Θ(n)，因为在每次划分结束后，枢轴元素会被放置到其最终位置上，而其他元素都会被分到枢轴元素的左边或右边，因此只需要进行一次交换。</p><p>C. 元素比较次数为 Θ(n log n)，因为在每次划分中，每个元素最多只会与一个枢轴元素进行比较，而划分的次数为 O(log n)，因此总的比较次数为 Θ(n log n)。</p><p>D. 当输入数组 A[1…n]由相等的 n 个元素组成时，每次执行划分过程 SPLIT 后划分出的子序列中有可能存在一个为空。例如，假设枢轴元素取第一个元素，输入数组为 A&#x3D;{1, 1, 1, …, 1}，则在第一次划分后，所有元素都被划分到了右侧子序列中，左侧子序列为空。</p><p>因此，选项 A、B、C 均为正确的，选项 D 不正确。</p><h3 id="Q4："><a href="#Q4：" class="headerlink" title="Q4："></a>Q4：</h3><p><img src="/Pasted%20image%2020230513215034.png"><br><strong>解</strong>：<br>当输入数组 A[1…n]由相等的 n 个元素组成时，快速排序算法 QUICKSORT 的运行特征是每次划分都会将枢轴元素放置在其最终位置上，并将小于（或等于）枢轴元素的元素分到枢轴元素的左边，大于枢轴元素的元素分到枢轴元素的右边。因此，在一个序列中，如果所有元素都相等，则每次划分后，枢轴元素左侧和右侧的子序列都不包含任何元素。由于左侧子序列为空，故枢轴元素必然为该子序列的第一个元素，即为 A[1]。而对于右侧子序列，由于其中也不存在任何元素，因此可以认为其不存在，因此 A[2], A[3], …, A[n]的顺序可以随意排列。</p><p>因此，选项 A 为正确答案，选项 B、C、D 均不正确。</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="QuickSort"><a href="#QuickSort" class="headerlink" title="QuickSort"></a>QuickSort</h2><blockquote><p>具体步骤解析见 P112-p115</p></blockquote><h3 id="Split-算法"><a href="#Split-算法" class="headerlink" title="Split 算法"></a>Split 算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回最终a[low]在序列中的下标</span></span><br><span class="line"><span class="comment">//左闭右闭</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">split</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> low, <span class="type">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = low; <span class="comment">// 主元素</span></span><br><span class="line"><span class="type">int</span> x = a[low];</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> j = low + <span class="number">1</span>; j &lt;= high; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt;= x)&#123; <span class="comment">//发现小于x的元素</span></span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i!=j) <span class="built_in">swap</span>(a[j], a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(a[low],a[i]);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li>时间复杂度：$O(n)$；</li><li>空间复杂度：$O(1)$；</li></ul><h3 id="主算法"><a href="#主算法" class="headerlink" title="主算法"></a>主算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左闭右闭</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> pivot = <span class="built_in">split</span>(a,low,high); <span class="comment">//排序后当前主元素所在的下标</span></span><br><span class="line"><span class="comment">//递归调用左右两部分，直至当前区间只有一个元素</span></span><br><span class="line"><span class="built_in">QuickSort</span>(a, low, pivot<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">QuickSort</span>(a, pivot<span class="number">+1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">快速排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以low为主元素，将序列元素划分为两部分 [ &lt;=a[low], a[low], &gt;a[low] ]</span></span><br><span class="line"><span class="comment">//返回最终a[low]在序列中的下标</span></span><br><span class="line"><span class="comment">//左闭右闭</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">split</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> low, <span class="type">int</span> high )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = low; <span class="comment">// 主元素</span></span><br><span class="line"><span class="type">int</span> x = a[low];</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> j = low + <span class="number">1</span>; j &lt;= high; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt;= x)&#123; <span class="comment">//发现小于x的元素</span></span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i!=j) <span class="built_in">swap</span>(a[j], a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(a[low],a[i]);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左闭右闭</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> pivot = <span class="built_in">split</span>(a,low,high); <span class="comment">//排序后当前主元素所在的下标</span></span><br><span class="line"><span class="built_in">QuickSort</span>(a, low, pivot<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">QuickSort</span>(a, pivot<span class="number">+1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">9</span>] = &#123;<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">QuickSort</span>(a,<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">8</span>;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li><strong>时间复杂度</strong>：$O(nlogn)$<br>最坏情况下：每一轮 split 得到的位置都为 low，即 pivot &#x3D; low，那么每一轮的两次分治都有其一支是没有用的，因此主函数的复杂度为 $O(n)$，综合起来最坏情况下的时间复杂度为$O(n^2)$；<br>最优情况下，每一轮 split 得到的位置为中项的位置，时间复杂度为$O(nlogn)$；</li><li><strong>空间复杂度</strong>：$O(n)$</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h1&gt;&lt;h3 id=&quot;Q1：求序列第二大元素&quot;&gt;&lt;a href=&quot;#Q1：求序列第二大元素&quot; class=&quot;headerlink&quot; title=&quot;Q1：求序列第二大元素&quot;&gt;&lt;/a&gt;Q1：求序列第二大元素&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/Pasted%20image%2020230513151811.png&quot;&gt;&lt;br&gt;&lt;strong&gt;解&lt;/strong&gt;：&lt;br&gt;在分治算法中，当$n&amp;#x3D;2$时，只需要一次比较即可找到第二大元素。当$n&amp;gt;2$时，需要分别在两个子数组中找到第一大和第二大的元素，然后再进行$2$次比较，从而得到整个数组的第二大元素。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://tomorrowllbefine.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://tomorrowllbefine.github.io/tags/Algorithm/"/>
    
    <category term="分治" scheme="https://tomorrowllbefine.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
</feed>
